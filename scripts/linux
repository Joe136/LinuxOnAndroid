#!/system/bin/sh
# See the file "license.terms" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.

#sdcard="$(readlink -f /sdcard)"
home="$ANDROID_DATA/local"
system="$(basename $0)"
imgtype="ext2"
shell="/bin/bash"
ramdisk="/mnt/ramdisk"
command[0]="$1"

export xbin="$ANDROID_ROOT/xbin"
export PATH="$xbin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:$PATH"
export TERM="xterm-color"
export HOME="/root"


if [ -z "$SECONDARY_STORAGE" ]; then
  sdcard="$EXTERNAL_STORAGE"
  #sdcard="$(df -P "/dev/block/mmcblk0p1" | awk '{ print $6 }' | tail -n 1 )"
else
  intern="$EXTERNAL_STORAGE"
  sdcard="$SECONDARY_STORAGE"
fi

currentscriptpath()
{
  local fullpath=`echo "$(readlink -f $0)"`
  local fullpath_length=`echo ${#fullpath}`
  local scriptname="$(basename "$fullpath")"
  local scriptname_length=`echo ${#scriptname}`
  local result_length=`echo $((fullpath_length - $scriptname_length - 1))`
  local result=`echo "$fullpath" | head -c $result_length`
  echo "$result"
}

getloopno()
{
for i in $(seq 255 -1 0); do
  if [ ! -e "/dev/block/loop$i" ]; then
    echo $i
    return
  fi
done
}

#kit="$(currentscriptpath)"
#img="$kit/$system.img"


if [ "$command" != "install" ]; then
  ##-------------------------Check Arguments--------------------------##
  #for (( i=$((BASH_ARGC - 1)); $((i >= 0)); i=$((i - 1)) )); do
  for (( i=$((-1)); $((i >= -BASH_ARGC)); i=$((i - 1)) )); do
    if [ "$(echo "${BASH_ARGV[$i]}" | head -c 2)" == "--" ];then
      case "$arg" in
      ##-----------------------Config Path----------------------------##
      --config)
        echo "WARNING: Do not change the default config path."
        i=$((i - 1))
        config_path="${BASH_ARGV[$i]}"
        break
      ;;
      ##-----------------------System User Home-----------------------##
      --home)
        echo "WARNING: Do not change the default home path."
        i=$((i - 1))
        arg_home="${BASH_ARGV[$i]}"
      ;;
      esac
    fi
  done
  
  
  if [ -z "$config_path" ]; then
    config_path="$home/linuxonandroid"
  fi
  
  
  #Froyo's apps-to-SD makes use of special loopback devices /dev/block/dm-#
  #Each program installed to SD uses up a normal loopback device.
  #We therefore have to make our own with a minor number that we hope
  #users will never reach.
  #Our mount will break if there are $loopno apps installed to SD

  if [ -e "$config_path/config.default" ]; then
    . "$config_path/config.default"
  fi
  if [ -e "$config_path/config.$system" ]; then
    . "$config_path/config.$system"
  fi
fi




##---------------------------Check Arguments--------------------------##
#for (( i=$((BASH_ARGC - 1)); $((i >= 0)); i=$((i - 1)) )); do
for (( i=$((-1)); $((i >= -BASH_ARGC)); i=$((i - 1)) )); do
  curr_arg="${BASH_ARGV[$i]}"
  if [ -z "$curr_arg" ]; then
    :
  elif [ "$curr_arg" == "-h" ] || [ "$curr_arg" == "--help" ]; then
    arg_help=true
    break
  #elif [ "$(echo "$curr_arg" | head -c 2)" == "--" ];then
  elif echo "$curr_arg" | grep -qxE -e '--[a-zA-Z][a-zA-Z\-\_]+';then
    case "$(echo "$curr_arg" | grep -oE -e '--[a-zA-Z][a-zA-Z\-\_]+')" in
    ##-------------------------Architecture---------------------------##
    #--android)
    #  arg_android="true"
    #;;
    ##-------------------------Architecture---------------------------##
    --architecture)
      i=$((i - 1))
      architecture="${BASH_ARGV[$i]}"
      arg_arch="true"
    ;;
    ##-------------------------Install Path of linux Script-----------##
    --bin)
      i=$((i - 1))
      arg_bin="${BASH_ARGV[$i]}"
    ;;
    ##-------------------------Config Path----------------------------##
    --config)
      echo "WARNING: Do not change the default config path."
      i=$((i - 1))
      config_path="${BASH_ARGV[$i]}"
    ;;
    ##-------------------------Initialize-----------------------------##
    --force)
      arg_force="true"
    ;;
    ##-------------------------System User Home-----------------------##
    --home)
      echo "WARNING: home"
      i=$((i - 1))
      arg_home="${BASH_ARGV[$i]}"
    ;;
    ##-------------------------Image Path-----------------------------##
    --img)
      i=$((i - 1))
      img="${BASH_ARGV[$i]}"
      arg_img="true"
    ;;
    ##-------------------------Initialize-----------------------------##
    --init)
      arg_init="true"
    ;;
    ##-------------------------Mount Path-----------------------------##
    --mnt)
      i=$((i - 1))
      mnt="${BASH_ARGV[$i]}"
      arg_mnt="true"
    ;;
    ##-------------------------Mount Path-----------------------------##
    --mnt-options)
      i=$((i - 1))
      imgoptions="${BASH_ARGV[$i]}"
      arg_imgoptions="true"
    ;;
    ##-------------------------Use native mount-----------------------##
    --native)
      native="true"
    ;;
    ##-------------------------Use native mount-----------------------##
    --noimage)
      arg_noimage="true"
    ;;
    ##-------------------------Use native mount-----------------------##
    --partition)
      i=$((i - 1))
      partition="${BASH_ARGV[$i]}"
      arg_partition="true"
    ;;
    ##-------------------------System PATH----------------------------##
    --path)
      i=$((i - 1))
      arg_path_abs="${BASH_ARGV[$i]}"
    ;;
    ##-------------------------System PATH----------------------------##
    --post-path)
      i=$((i - 1))
      arg_path_post="${BASH_ARGV[$i]}"
    ;;
    ##-------------------------System PATH----------------------------##
    --pre-path)
      i=$((i - 1))
      arg_path_pre="${BASH_ARGV[$i]}"
    ;;
    ##-------------------------System Name----------------------------##
    --refresh)
      arg_refresh="true"
    ;;
    ##-------------------------System Name----------------------------##
    --system)
      if [ "$command" == "install" ]; then
        # The script must be installed or renamed to work correctly
        arg_system="true"
        i=$((i - 1))
        system="${BASH_ARGV[$i]}"
      fi
    ;;
    ##-------------------------System TERM----------------------------##
    --term)
      i=$((i - 1))
      arg_term="${BASH_ARGV[$i]}"
    ;;
    ##-------------------------System Name----------------------------##
    --type)
      # The script must be installed or renamed to work correctly
      arg_imgtype="true"
      i=$((i - 1))
      imgtype="${BASH_ARGV[$i]}"
    ;;
    ##-------------------------Unknown Argument-----------------------##
    #*)
    #  echo -e "$0: unknown argument: $curr_arg\n"
    #  "$0" -h
    #  exit 2 #TODO set the standard return value for this case
    #;;
    esac
  elif echo "$curr_arg" | grep -qxE -e '--[a-zA-Z][a-zA-Z\-\_]+=';then
    case "$(echo "$curr_arg" | grep -oE -e '--[a-zA-Z][a-zA-Z\-\_]+=')" in
    ##-------------------------Port for SSH---------------------------##
    --ssh-port=)
      sshport="$(echo "$curr_arg" | awk -F "=" '{print $2}')"
      if ! echo "$sshport" | grep -qE -e '^[0-6]?[0-9]?[0-9]?[0-9]?[0-9]'; then # FIXME this is not correct
        echo "ERROR: Wrong port."
        exit 2
      fi
      if [ "$((sshport > 0 && sshport <= 65535))" == "1" ]; then
        echo "ERROR: Wrong port."
        exit 2
      fi
    ;;
    ##-------------------------Port for VNC---------------------------##
    --vnc-port=)
      vncport="$(echo "$curr_arg" | awk -F "=" '{print $2}')"
      if ! echo "$vncport" | grep -qE -e '^[0-6]?[0-9]?[0-9]?[0-9]?[0-9]'; then # FIXME this is not correct
        echo "ERROR: Wrong port."
        exit 2
      fi
      if [ "$((vncport > 0 && vncport <= 65535))" == "1" ]; then
        echo "ERROR: Wrong port."
        exit 2
      fi
    ;;
    esac
  #elif [ "$(echo -"$curr_arg" | head -c 2)" == "--" ];then
  elif echo -"$curr_arg" | grep -qxE -e '--[a-zA-Z]+';then
    #args="$(echo -"$curr_arg" | awk 'BEGIN{FS=""}{ for (i = 3; i <= NF; ++i) print $i; }')"
    args="$(echo -"$curr_arg" | grep -oE -e '--[a-zA-Z]+')"

    for arg in `echo -e "$args"`; do
      case "$arg" in
    ##-------------------------System Name----------------------------##
      s)
        arg_system="true"
        i=$((i - 1))
        system="${BASH_ARGV[$i]}"
      ;;
      ##-----------------------Unknown--------------------------------##
      #*)
      #  echo -e "$0: unknown argument: -$arg\n"
      #  "$0" -h
      #  exit 2 #TODO set the standard return value for this case
      #;;
      esac
    done
  else
    ##-------------------------Unknown Argument-----------------------##
    if [ -z "$arg_rest" ]; then
      arg_rest="$curr_arg" # FIXME args with linebreaks
      arg_rest2="\'$curr_arg\'" # FIXME args with linebreaks
    else
      arg_rest="$arg_rest\n$curr_arg"
      arg_rest2="$arg_rest2 \'$curr_arg\'"
    fi
    #echo -e "$0: unknown argument: $curr_arg\n"
    #"$0" -h
    #exit 2 #TODO set the standard return value for this case
  fi
done


if [ "$command" != "install" ]; then
  [ -z "$mnt" ] && mnt="$home/$system"
fi
if [ -z "$config_path" ]; then
  config_path="$home/linuxonandroid"
fi


while true; do

tmp_len="${#command[@]}"
tmp_len="${{tmp_len - 1}}"
[[ "$tmp_len" == "-1" ]] && break

tmp_commamd="${command[$tmp_len]}"
unset ${command[$tmp_len]}

case "$tmp_command" in
mount)
  if [ ! -e "$config_path/config.$system" ]; then
    "$0" install "$system"
    . "$config_path/config.$system"
  fi

  if mount | grep -q " $mnt "; then
    echo "$img already mounted"
    #if [ "$arg_android" == "true" ] && $(mount | ! grep -q " $mnt/mnt/data "); then
    #if [ "$arg_android" == "true" ] && ! mountpoint -q "$mnt/mnt/data"; then
    #  echo "Mounting: System Parts ..."
    #  mount -o bind "$ANDROID_DATA" "$mnt/mnt/data"
    #  mount -o bind "$ANDROID_ROOT" "$mnt/mnt/system"
    #  #if [ -d "/sbin" ]; then
    #  #  mount -o bind /sbin "$mnt/mnt/sbin"
    #  #fi
    #fi
    continue
  fi

  echo "Mounting: Prepwork ..."
  #some ROMS mount the sdcard nodev
  mount -o dev,remount "$sdcard"
  #some also don't load filesystem drivers on boot
  grep -q ext2 /proc/filesystems || modprobe ext2

  if [ ! -z "$imgoptions" ]; then
    imgoptions="-o $imgoptions"
  fi

  if [ "$native" == "true" ]; then
    echo "Mounting: Native mount ..."
    mount -t "$imgtype" $imgoptions "$partition" "$mnt"
  else
    echo "Mounting: Loopback mount ..."
    mkdir -p "$mnt"

    loopno=$(getloopno)
    loop="/dev/block/loop$loopno"
    if [ "$loopno" == "" ]; then
      echo "Error: Could not mount image, no free loop-devices found"
      exit 6
    fi
    #if [ -e "$loop" ]; then
    #  echo "Remove Loopback Device"
    #  losetup -d "$loop"
    #  rm "$loop"
    #fi
    #create loop device
    mknod "$loop" b 7 "$loopno"
    losetup "$loop" "$img"
    mount -t "$imgtype" $imgoptions "$loop" "$mnt"
    touch "$img"
  fi

  if ! mountpoint -q "$mnt"; then
    echo "Error: Could not mount image, unknown problem"
    exit 7
  fi

  echo "Mounting: Setting up chroot environment ..."
  mount -o bind /dev "$mnt/dev"
  mount -t devpts devpts "$mnt/dev/pts"
  mount -o bind /proc "$mnt/proc"
  mount -o bind /sys "$mnt/sys"

  if [ ! -z "$mountdefault" ]; then
    for comm in $(echo "$mountdefault" | awk 'BEGIN{FS=","}{print $0}'); do
      if [ "$comm" == "sdcard" ]; then # TODO
        #make the SD card accessible to the chroot environment
        mkdir -p "$mnt/mnt/sdcard"
        #mount -o bind $sdcard "$mnt/media/sdcard"
        mount_point=$(df -P | awk '$6=="'$sdcard'" {print $1}')
        mount -t vfat -o rw,dirsync,suid,exec,relatime "$mount_point" "$mnt/mnt/sdcard"
      elif [ "$comm" == "intern" ]; then
      #elif [ "$comm" == "android" ]; then
      elif [ "$comm" == "images" ]; then
        "$0" mountimg $@
      fi
    done

    #if [ "$2" = "android" ]; then
    #  echo "Mounting: System Parts ..."
    #  mount -o bind $ANDROID_DATA "$mnt/mnt/data"
    #  mount -o bind $ANDROID_ROOT "$mnt/mnt/system"
    #  #if [ -d "/sbin" ]; then
    #  #  mount -o bind /sbin "$mnt/mnt/sbin"
    #  #fi
    #fi
  fi

  echo "	[ Done ]"

;;
umount|unmount)
  "$0" umountimg $@

  #loop="$(mountpoint -n "$mnt" | cut -sd' ' -f1)"
  #if ! losetup "$loop" > /dev/null 2>&1; then
  #  unset loop
  #fi

  mounts="$(cut -sd' ' -f2 /proc/mounts | grep "^$mnt" | sort -r)"

  for m in $mounts; do
    if losetup "$(mountpoint -n "$m" | cut -sd' ' -f1)" > /dev/null 2>&1; then
      loop="$loop\n`losetup "$(mountpoint -n "$m" | cut -sd' ' -f1)"`"
    fi
  done

  sys_pid="$(ps -o pid,comm | awk '/zygote/ || /'$$'/ {print $1}')"
  mnt_pid="$(fuser -m "$mnt")"

  echo "Kill running processes"
  #fuser -km "$mnt" # TODO replace with include list
  for proc in $mnt_pid; do
    unset temp1
    for p in $sys_pid; do
      if [ "$proc" == "$p" ]; then
        temp1="true"
        break
      fi
    done
    kill -s 9 "$proc"
  done

  echo "Unmounting ..."
  #awk '{print $2}' /proc/mounts | grep "^$mnt" | sort -r | xargs umount
  #cut -sd' ' -f2 /proc/mounts | grep "^$mnt" | sort -r | awk '{system("umount -fl \"" $0 "\"")}'

  for m in $mounts; do
    # Unmount more and more aggressive
    umount "$m"
    mountpoint -q "$m" && umount -f "$m"
    mountpoint -q "$m" && umount -fl "$m"
  done

  echo "Unmounting: Loopback unmount ..."
  for l in $loop; do
    losetup -d "$l"
    rm "$l"
  done

;;
mountsd)
  #make the SD card accessible to the chroot environment
  if [ -z "$sdcard" ] &&  [ -z "$intern" ]; then
    echo "No media found for mounting"
    exit 8
  fi

  if ! mountpoint -q "$mnt"; then
    echo "$img not mounted"
    exit 3
  fi

  if [ -n "$sdcard" ]; then
    mkdir -p "$mnt/mnt/sdcard"

    if mountpoint -q "$mnt/mnt/sdcard"; then
      echo "$mnt/mnt/sdcard already mounted"
    else
      mount_point=$(df -P | awk '$6=="'$sdcard'" {print $1}')
      mount -t vfat -o rw,dirsync,suid,exec,relatime "$mount_point" "$mnt/mnt/sdcard"
    fi
  fi

  if [ -n "$intern" ]; then
    mkdir -p "$mnt/mnt/intern"

    if mountpoint -q "$mnt/mnt/intern"; then
      echo "$mnt/mnt/intern already mounted"
    else
      mount_point=$(df -P | awk '$6=="'$intern'" {print $1}')
      mount -t vfat -o rw,dirsync,suid,exec,relatime "$mount_point" "$mnt/mnt/intern"
    fi
  fi

;;
umountsd|unmountsd)
  mounts="$(cut -sd' ' -f2 /proc/mounts | grep "^$mnt/mnt/sdcard" | sort -r)"
  mounts="$mounts\n$(cut -sd' ' -f2 /proc/mounts | grep "^$mnt/mnt/intern" | sort -r)"

  if [ -z "$mounts" ]; then
    else "Nothing to unmount"
  else
    for m in $mounts; do
      if losetup "$(mountpoint -n "$m" | cut -sd' ' -f1)" > /dev/null 2>&1; then
        loop="$loop\n`losetup "$(mountpoint -n "$m" | cut -sd' ' -f1)"`"
      fi
    done

    sys_pid="$(ps -o pid,comm | awk '/zygote/ || /'$$'/ {print $1}')"
    mnt_pid="$(fuser -m "$mnt/mnt/sdcard")"
    mnt_pid="$mnt_pid\n$(fuser -m "$mnt/mnt/intern")"

    echo "Kill running processes"
    for proc in $mnt_pid; do
      unset temp1
      for p in $sys_pid; do
        if [ "$proc" == "$p" ]; then
          temp1="true"
          break
        fi
      done
      kill -s 9 "$proc"
    done

    echo "Unmounting ..."
    #awk '{print $2}' /proc/mounts | grep "^$mnt" | sort -r | xargs umount
    #cut -sd' ' -f2 /proc/mounts | grep "^$mnt" | sort -r | awk '{system("umount -fl \"" $0 "\"")}'

    for m in $mounts; do
      # Unmount more and more aggressive
      umount "$m"
      mountpoint -q "$m" && umount -f "$m"
      mountpoint -q "$m" && umount -fl "$m"
    done

    echo "Unmounting: Loopback unmount ..."
    for l in $loop; do
      losetup -d "$l"
      rm "$l"
    done
  fi

  #echo "Kill running processes"
  #fuser -km "$mnt/mnt/sdcard"
  #echo "Unmounting ..."
  #umount -fl "$mnt/mnt/sdcard"

;;
mountimg)
  beg=250
  unset IFS
  conffiles=default'
'"$system"
  for mountconf in $conffiles; do
    if [ -e "/data/local/linuxonandroid/mount.$mountconf" ]; then
      for line in $(cat "/data/local/linuxonandroid/mount.$mountconf" | awk '{print $0}'); do
        IFS=":"
        image="$(echo $line | awk '{ print $1 }')"
        target="$mnt/$(echo $line | awk '{ print $2 }')"
        options="$(echo $line | awk '{ print $3 }')"
        type="$(echo $line | awk '{ print $4 }')"
        unset IFS
        if [ ! -z "$options" ]; then options="-o $options"; else unset options; fi
        if [ -z "$type" ]; then type="ext2"; fi

        if [ "$image" != "" ] && [ "$target" != "" ]; then
          if mountpoint -q "$target" || [ ! -e "$image" ]; then
            continue;
          fi
          for i in $(seq $beg -1 0); do
            if [ ! -e "/dev/block/loop$i" ]; then
              loopno=$i
              beg=$((i-1))
              break
            fi
          done
          echo mount -t "$type" $options "$image" "$target"
          loop="/dev/block/loop$loopno"
          #create loop device
          mknod "$loop" b 7 "$loopno"
          losetup "$loop" "$image"
          mkdir -p "$target"
          mount -t "$type" $options "$loop" "$target"
        fi
      done
    fi
  done

;;
umountimg|unmountimg)
  sys_pid="$(ps -o pid,comm | awk '/zygote/ || /'$$'/ {print $1}')"
  unset IFS
  conffiles=default'
'"$system"
  for mountconf in $conffiles; do
    if [ -e "/data/local/linuxonandroid/mount.$mountconf" ]; then
      for line in $(cat "/data/local/linuxonandroid/mount.$mountconf" | awk '{print $0}'); do
        IFS=":"
        target="$mnt/$(echo $line | awk '{ print $2 }')"
        unset IFS

        # Continue if not mounted
        ! mountpoint -q "$target" && continue

        mounts="$(cut -sd' ' -f2 /proc/mounts | grep "^$target" | sort -r)"
        mnt_pid="$(fuser -m "$target")"

        # Something's going wrong
        [[ -z "$mounts" ]] && continue

        for m in $mounts; do
          if losetup "$(mountpoint -n "$m" | cut -sd' ' -f1)" > /dev/null 2>&1; then
            loop="$loop\n`losetup "$(mountpoint -n "$m" | cut -sd' ' -f1)"`"
          fi
        done

        echo "Kill running processes"
        for proc in $mnt_pid; do
          unset temp1
          for p in $sys_pid; do
            if [ "$proc" == "$p" ]; then
              temp1="true"
              break
            fi
          done
          kill -s 9 "$proc"
        done

        echo "Unmounting ..."
        for m in $mounts; do
          # Unmount more and more aggressive
          umount "$m"
          mountpoint -q "$m" && umount -f "$m"
          mountpoint -q "$m" && umount -fl "$m"
        done
    
        echo "Unmounting: Loopback unmount ..."
        for l in $loop; do
          losetup -d "$l"
          rm "$l"
        done
      done
    fi
  done

;;
mountram)
  if ! mountpoint -q "$mnt"; then
    echo "$img not mounted"
    exit 5
  elif mountpoint -q "$mnt/$ramdisk"; then
    echo "$mnt/$ramdisk already mounted"
    exit 8
  fi

  mount -t ramfs ramfs "$mnt/$ramdisk"

;;
umountram)
#  echo "Kill running processes"
#  fuser -km "$mnt/$ramdisk"
  echo "Unmounting ..."
  mountpoint -q "$mnt/$ramdisk" && umount -fl "$mnt/$ramdisk"

;;
chroot|"")
  if [ -z "$tmp_chroot" ]; then
    tmp_chroot="true"
    command[${#command[@]}]="mount"
    command[${#command[@]}]="chroot"
    continue
  fi
  #"$0" mount # FIXME set the arguments

  cd "$mnt"
  chroot "$arg_user" "$mnt" $shell

;;
ssh)
  if [ -z "$tmp_ssh" ]; then
    tmp_ssh="true"
    command[${#command[@]}]="mount"
    command[${#command[@]}]="ssh"
    continue
  fi
  #"$0" mount # FIXME set the arguments

  cd "$mnt"
  chroot "$mnt" /root/scripts/ssh.sh "$sshport" $arg_rest2
  #eval chroot "$mnt" /root/scripts/ssh.sh "$sshport" $arg_rest2

;;
vnc)
  if [ -z "$tmp_vnc" ]; then
    tmp_vnc="true"
    command[${#command[@]}]="mount"
    command[${#command[@]}]="vnc"
    continue
  fi
  #"$0" mount # FIXME set the arguments

  cd "$mnt"
  chroot "$mnt" /root/scripts/vnc.sh "$vncport" $arg_rest2
  #eval chroot "$mnt" /root/scripts/vnc.sh "$vncport" $arg_rest2

;;
apache)
  if [ -z "$tmp_apache" ]; then
    tmp_apache="true"
    command[${#command[@]}]="mount"
    command[${#command[@]}]="apache"
    continue
  fi
  #"$0" mount # FIXME set the arguments

  cd "$mnt"
  chroot "$mnt" /root/scripts/apache.sh $arg_rest2
  #eval chroot "$mnt" /root/scripts/apache.sh $arg_rest2

;;
install)
  [[ -z "$mountdefault" ]] && mountdefault="sdcard"
  #[[ -z "$imgtype" ]] && imgtype="ext2"
  [[ -z "$ramdisk" ]] && ramdisk="/mnt/ramdisk"
  [[ -z "$wlan_if" ]] && wlan_if="wlan0"
  [[ -z "$mobile_if" ]] && mobile_if="rmnet0"
  [[ -z "$shell" ]] && shell="/bin/bash"

  if [ "$arg_refresh" == "true" ] && [ -e "$config_path/config.$system" ]; then
    [[ -n "$img" ]] && tmp_img="$img"
    [[ -n "$mnt" ]] && tmp_mnt="$mnt"
    [[ -n "$native" ]] && tmp_native="$native"
    [[ -n "$architecture" ]] && tmp_architecture="$architecture"
    [[ -n "$partition" ]] && tmp_partition="$partition"
    [[ "$arg_imgtype" == "true" ]] && tmp_imgtype="$imgtype"
    [[ -n "$imgoptions" ]] && tmp_imgoptions="$imgoptions"
    #[[ "$arg_ramdisk" == "true" ]] && tmp_ramdisk="$ramdisk"
    [[ -n "$sshport" ]] && tmp_sshport="$sshport"
    [[ -n "$vncport" ]] && tmp_vncport="$vncport"

    # ! grep -qe "^mountdefault=" "$config_path/config.$system" unset mountdefault
    unset mountdefault
    #unset imgtype
    grep -qe "^TERM=" "$config_path/config.$system" && unset TERM

    . "$config_path/config.$system"
    cp "$config_path/config.$system" "$config_path/config.$system.bak"
    #mv "$config_path/config.$system" "$config_path/config.$system.bak"

    [[ -n "$tmp_img" ]] && img="$tmp_img"
    [[ -n "$tmp_mnt" ]] && mnt="$tmp_mnt"
    [[ -n "$tmp_native" ]] && native="$tmp_native"
    [[ -n "$tmp_architecture" ]] && architecture="$tmp_architecture"
    [[ -n "$tmp_partition" ]] && partition="$tmp_partition"
    [[ -n "$tmp_imgtype" ]] && imgtype="$tmp_imgtype"
    [[ -n "$tmp_imgoptions" ]] && imgoptions="$tmp_imgoptions"
    #[[ -n "$tmp_ramdisk" ]] && ramdisk="$tmp_ramdisk"
    [[ -n "$tmp_sshport" ]] && sshport="$tmp_sshport"
    [[ -n "$tmp_vncport" ]] && vncport="$tmp_vncport"
  fi


  [[ -z "$mnt" ]] && mnt="$home/$system"
  [[ -z "$native" ]] && native="false"
  [[ -z "$sshport" ]] && sshport="22"
  #[[ -z "$vncport" ]] && vncport="5901"


  if [ "$arg_noimage" == "true" ]; then
    unset img
  fi

  if [ ! -e "$config_path/config.$system" ] || [ "$arg_force" == "true" ] || [ "$arg_refresh" == "true" ]; then
    echo "Creating config files ..."
    mkdir -p "$config_path"
    #echo "kit=\"$kit\"" > "$config_path/config.$system"
    echo "img=\"$img\"" > "$config_path/config.$system"
    echo "mnt=\"$mnt\"" >> "$config_path/config.$system"
    echo "native=\"$native\"" >> "$config_path/config.$system"
    echo "mountdefault=\"$mountdefault\" #sdcard,intern,android,images,images:default,images:system,images::wireshark,ram" >> "$config_path/config.$system"
    echo "architecture=\"$architecture\" #debian,arch" >> "$config_path/config.$system"
    echo "partition=\"$partition\"" >> "$config_path/config.$system"
    echo "imgtype=\"$imgtype\"" >> "$config_path/config.$system"
    echo "imgoptions=\"$imgoptions\"" >> "$config_path/config.$system"
    echo "shell=\"$shell\"" >> "$config_path/config.$system"
    echo "ramdisk=\"$ramdisk\"" >> "$config_path/config.$system"
    echo "sshport=\"$sshport\"" >> "$config_path/config.$system"
    echo "vncport=\"$vncport\"" >> "$config_path/config.$system"
    echo "autorun=\"$autorun\"" >> "$config_path/config.$system"
    echo "wlan_if=\"$wlan_if\"" >> "$config_path/config.$system"
    echo "mobile_if=\"$mobile_if\"" >> "$config_path/config.$system"
    echo "export TERM=\"$TERM\"" >> "$config_path/config.$system"
    #echo "loopno=\"254\"" >> "$config_path/config.$system"
  fi

;;
passwd)
  if [ -z "$tmp_passwd" ]; then
    tmp_passwd="true"
    command[${#command[@]}]="mount"
    command[${#command[@]}]="passwd"
    continue
  fi
  #"$0" mount # FIXME set the arguments

  cd "$mnt"
  chroot "$mnt" /usr/bin/passwd $arg_rest2   #FIXME Check if this is an user

;;
status)
  #echo "currently not implemented"
  echo -n "Current CPU Frequency: "
  cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_cur_freq
  echo -n "Minimum CPU Frequency: "
  cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_min_freq
  echo -n "Maximum CPU Frequency: "
  cat /sys/devices/system/cpu/cpu0/cpufreq/scaling_max_freq
  #echo "Memory (RAM):"
  #free
  #echo ""
  #echo "Swap:"
  #cat /proc/swaps

;;
statistic)
  # my wishlist to install + is currently installed
  # htop, tmux, ssh, vnc, chroot, truecrypt
  echo "currently not implemented"
  #echo "Memory (RAM):"
  #free
  #echo ""
  #echo "Swap:"
  #cat /proc/swaps

;;
space)
  echo "Memory (RAM):"
  free
  echo ""
  echo "Swap:"
  cat /proc/swaps

;;
network|nw)
  #if [ -z "$tmp_network" ]; then
  #  tmp_network="true"
  #  command[${#command[@]}]="mount"
  #  command[${#command[@]}]="network"
  #  continue
  #fi
  #"$0" mount # FIXME set the arguments

  #cd "$mnt"
  #chroot "$mnt" /root/scripts/network.sh "$wlan_if" $@

;;
hardinstall)

;;
help)
  case "$2" in
    "")

    ;;
    mount)
      echo "Mount the Image and system-parts."
    ;;
    mountsd)
      echo "Make the SD card accessible to the chroot environment."
    ;;
    *)
      echo "Command unknown"
    ;;
  esac

;;
*)
  echo "Usage: $(basename $0) [help|[u[n]]mount[sd|img]|chroot|ssh|vnc|install|passwd|hardinstall]"
  exit 1

;;
esac

break
done
