#!/system/bin/mksh
# See the file "license.terms" for information on usage and redistribution of
# this file, and for a DISCLAIMER OF ALL WARRANTIES.

unset loopno loop

##---------------------------Start function_mount-----------------------------##
function function_mount()
{
  echo "point2: " $img
  if [ ! -e "$config_path/config.$system" ]; then
    function_install
    . "$config_path/config.$system"
  fi

  if mount | grep -q " $mnt "; then
    echo "$img already mounted"
    #if [ "$arg_android" == "true" ] && $(mount | ! grep -q " $mnt/mnt/data "); then
    #if [ "$arg_android" == "true" ] && ! mountpoint -q "$mnt/mnt/data"; then
    #  echo "Mounting: System Parts ..."
    #  mount -o bind "$ANDROID_DATA" "$mnt/mnt/data"
    #  mount -o bind "$ANDROID_ROOT" "$mnt/mnt/system"
    #  #if [ -d "/sbin" ]; then
    #  #  mount -o bind /sbin "$mnt/mnt/sbin"
    #  #fi
    #fi
    return
  fi

  echo "Mounting: Prepare ..."
  #some ROMS mount the sdcard nodev
  mount -o dev,remount "$sdcard"
  #some also don't load filesystem drivers on boot
  grep -q ext2 /proc/filesystems || modprobe ext2

  [[ -n "$imgoptions" ]] && imgoptions="-o $imgoptions"

  if [ "$native" == "true" ]; then
    echo "Mounting: Native mount ..."
    mount -t "$imgtype" $imgoptions "$partition" "$mnt"
  else
    echo "Mounting: Loopback mount ..."

   if mountpoint -q "$mnt"; then
      echo "Error: Anything is mounted on this mount point"
      exit 9
   fi
    mkdir -p "$mnt"

    tmp_loopno="$loopno"
    loopno=$(getloopno $loopno)
    loop="/dev/block/loop$loopno"
    if [ "$loopno" == "" ]; then
      echo "Error: Could not mount image, no free loop-devices found"
      [[ -n "$tmp_loopno" ]] && echo "Error: Maybe the predefined loop-device \"$tmp_loopno\" is reserved?"
      exit 6
    fi
    #if [ -e "$loop" ]; then
    #  echo "Remove Loopback Device"
    #  losetup -d "$loop"
    #  rm "$loop"
    #fi
    #create loop device
    mknod "$loop" b 7 "$loopno"
    losetup "$loop" "$img"
    #mount -t "$imgtype" $imgoptions "$loop" "$mnt"
    mount -t "$imgtype" "$loop" "$mnt"
    #touch "$img"
  fi

  if ! mountpoint -q "$mnt"; then
    echo "Error: Could not mount image, unknown problem"
    exit 7
  fi

  echo "Mounting: Setting up chroot environment ..."
  mkdir -p "$mnt/.dev";     mount -o bind /dev "$mnt/.dev"
  mkdir -p "$mnt/.dev/pts"; mount -t devpts devpts "$mnt/.dev/pts"
  mkdir -p "$mnt/proc";     mount -o bind /proc "$mnt/proc"
  mkdir -p "$mnt/sys";      mount -o bind /sys "$mnt/sys"
  mkdir -p "$mnt/run";      mount -t tmpfs tmpfs "$mnt/run"

  #TODO experimental (workaround for logging)
  rm -r "$mnt/dev"/* 2> /dev/null
  for l in `ls -d "$mnt/.dev"/*`; do
    l="$(basename "$l")"
    ln -s "../.dev/$l" "$mnt/dev/$l"
  done
  rm "$mnt/dev/log" "$mnt/dev/xconsole" 2> /dev/null

  if [ ! -z "$mountdefault" ]; then
    for comm in $(echo "$mountdefault" | awk 'BEGIN{FS=","}{print $0}'); do
      if [ "$comm" == "sdcard" ]; then # TODO
        #make the SD card accessible to the chroot environment
        mkdir -p "$mnt/mnt/sdcard"
        #mount -o bind $sdcard "$mnt/media/sdcard"
        mount_point=$(df -P | awk '$6=="'$sdcard'" {print $1}')
        mount -t vfat -o rw,dirsync,suid,exec,relatime "$mount_point" "$mnt/mnt/sdcard"
      elif [ "$comm" == "intern" ]; then
        :
      #elif [ "$comm" == "android" ]; then
      #  :
      elif [ "$comm" == "images" ]; then
        "$0" mountimg $@
      fi
    done

    #if [ "$2" = "android" ]; then
    #  echo "Mounting: System Parts ..."
    #  mount -o bind $ANDROID_DATA "$mnt/mnt/data"
    #  mount -o bind $ANDROID_ROOT "$mnt/mnt/system"
    #  #if [ -d "/sbin" ]; then
    #  #  mount -o bind /sbin "$mnt/mnt/sbin"
    #  #fi
    #fi
  fi

  echo "	[ Done ]"
}



##---------------------------Start function_umount----------------------------##
function function_umount()
{
  #function_umountimg
  #function_umountsd

  unset loop
  loopcount=0

  mounts="$(cut -sd' ' -f2 /proc/mounts | grep "^$mnt" | sort -r)"   #TODO paths with spaces

  [[ -z "$mounts" ]] && echo "Nothing to unmount" && return

  for m in $mounts; do
    looppath="$(mountpoint -n "$m" | cut -sd' ' -f1)"
    if echo "$looppath" | grep -qe '^/dev/[a-z/]*loop[0-9][0-9]*'; then
      set +A loop -- [$loopcount]="$looppath"
      loopcount=$((loopcount + 1))
    fi
  done

  echo "Kill running processes"
  sys_pid="$(ps -o pid,comm | awk '/zygote/ || /'$$'/ {print $1}')" #TODO better analysis of never-killing processes
  mnt_pid="$(fuser -m "$mnt")"
  unset systemblocked

  #fuser -km "$mnt" # TODO replace with include list
  for proc in $mnt_pid; do
    unset temp1
    for sysp in $sys_pid; do
      if [ "$proc" == "$sysp" ]; then
        temp1="true"
        systemblocked="true"
        break
      fi
    done
    [[ "$temp1" != "true" ]] && kill -s 9 "$proc"   #TODO less brutal, quit first
  done

  echo "Unmounting ..."
  echo "   unmount Images ..."
  for m in $mounts; do
    # Unmount more and more aggressive
    umount "$m"
    mountpoint -q "$m" && umount -f "$m"
    mountpoint -q "$m" && umount -fl "$m"
  done

  echo "   unmount Loopback Devices ..."
  for l in ${loop[@]}; do
    if [ -e "$l" ]; then
      losetup -d "$l"
      rm "$l"
    fi
  done
}



##---------------------------Start function_mountsd---------------------------##
function function_mountsd()
{
  #make the SD card accessible to the chroot environment
  if [ -z "$sdcard" ] &&  [ -z "$intern" ]; then
    echo "No media found for mounting"
    exit 8
  fi

  if ! mountpoint -q "$mnt"; then
    echo "$img not mounted"
    exit 3
  fi

  if [ -n "$sdcard" ]; then
    mkdir -p "$mnt/mnt/sdcard"

    if mountpoint -q "$mnt/mnt/sdcard"; then
      echo "$mnt/mnt/sdcard already mounted"
    else
      mount_point=$(df -P | awk '$6=="'$sdcard'" {print $1}')
      mount -t vfat -o rw,dirsync,suid,exec,relatime "$mount_point" "$mnt/mnt/sdcard"
    fi
  fi

  if [ -n "$intern" ]; then
    mkdir -p "$mnt/mnt/intern"

    if mountpoint -q "$mnt/mnt/intern"; then
      echo "$mnt/mnt/intern already mounted"
    else
      mount_point=$(df -P | awk '$6=="'$intern'" {print $1}')
      mount -t vfat -o rw,dirsync,suid,exec,relatime "$mount_point" "$mnt/mnt/intern"
    fi
  fi
}



##---------------------------Start function_umountsd--------------------------##
function function_umountsd()
{
  unset loop
  loopcount=0

  mounts="$(cut -sd' ' -f2 /proc/mounts | grep "^$mnt/mnt/sdcard" | sort -r)"
  mounts="$mounts\n$(cut -sd' ' -f2 /proc/mounts | grep "^$mnt/mnt/intern" | sort -r)"

  [[ -z "$mounts" ]] && echo "Nothing to unmount" && return

  for m in $mounts; do
    looppath="$(mountpoint -n "$m" | cut -sd' ' -f1)"
    if echo "$looppath" | grep -qe '^/dev/[a-z/]*loop[0-9][0-9]*'; then
      set +A loop -- [$loopcount]="$looppath"
      loopcount=$((loopcount + 1))
    fi
  done

  echo "Kill running processes"
  sys_pid="$(ps -o pid,comm | awk '/zygote/ || /'$$'/ {print $1}')"
  mnt_pid="$(fuser -m "$mnt/mnt/sdcard")"
  mnt_pid="$mnt_pid\n$(fuser -m "$mnt/mnt/intern")"
  unset systemblocked

  #fuser -km "$mnt" # TODO replace with include list
  for proc in $mnt_pid; do
    unset temp1
    for sysp in $sys_pid; do
      if [ "$proc" == "$sysp" ]; then
        temp1="true"
        systemblocked="true"
        break
      fi
    done
    [[ "$temp1" != "true" ]] && kill -s 9 "$proc"   #TODO less brutal, quit first
  done

  echo "Unmounting ..."
  echo "   unmount Images ..."
  for m in $mounts; do
    # Unmount more and more aggressive
    umount "$m"
    mountpoint -q "$m" && umount -f "$m"
    mountpoint -q "$m" && umount -fl "$m"
  done

  echo "   unmount Loopback Devices ..."
  for l in ${loop[@]}; do
    if [ -e "$l" ]; then
      losetup -d "$l"
      rm "$l"
    fi
  done
}



##---------------------------Start function_mountimg--------------------------##
function function_mountimg()
{
  #TODO check if $mnt is mounted
  beg=250
  set +A conffiles -- [0]="default"
  set +A conffiles -- [1]="$system"

  for mountconf in ${conffiles[@]}; do
    if [ -e "/data/local/linuxonandroid/mount.$mountconf" ]; then
      for line in $(cat "/data/local/linuxonandroid/mount.$mountconf" | awk '{print $0}'); do
        image="$(echo $line | cut -sd':' -f1)"
        target="$mnt/$(echo $line | cut -sd':' -f2)"
        options="$(echo $line | cut -sd':' -f3)"
        type="$(echo $line | cut -sd':' -f4)"

        if [ ! -z "$options" ]; then options="-o $options"; else unset options; fi
        if [ -z "$type" ]; then type="ext2"; fi

        if [ "$image" != "" ] && [ "$target" != "" ]; then
          if mountpoint -q "$target" || [ ! -e "$image" ]; then
            continue;
          fi
          for i in $(seq $beg -1 0); do
            if [ ! -e "/dev/block/loop$i" ]; then
              loopno=$i
              beg=$((i-1))
              break
            fi
          done
          echo mount -t "$type" $options "$image" "$target"
          loop="/dev/block/loop$loopno"
          #create loop device
          mknod "$loop" b 7 "$loopno"
          losetup "$loop" "$image"
          mkdir -p "$target"
          mount -t "$type" $options "$loop" "$target"
        fi
      done
    fi
  done
}



##---------------------------Start function_umountimg-------------------------##
function function_umountimg()
{
  sys_pid="$(ps -o pid,comm | awk '/zygote/ || /'$$'/ {print $1}')"
  set +A conffiles -- [0]="default"
  set +A conffiles -- [1]="$system"

  for mountconf in ${conffiles[@]}; do
    if [ -e "/data/local/linuxonandroid/mount.$mountconf" ]; then
      for line in $(cat "/data/local/linuxonandroid/mount.$mountconf" | awk '{print $0}'); do
        target="$mnt/$(echo $line | cut -sd':' -f2)"

        # Continue if not mounted
        ! mountpoint -q "$target" && continue

        unset loop
        loopcount=0

        mounts="$(cut -sd' ' -f2 /proc/mounts | grep "^$target" | sort -r)"

        # Something's going wrong
        [[ -z "$mounts" ]] && echo "warning: could not unmount $target" && continue

        for m in $mounts; do
          looppath="$(mountpoint -n "$m" | cut -sd' ' -f1)"
          if echo "$looppath" | grep -qe '^/dev/[a-z/]*loop[0-9][0-9]*'; then
            set +A loop -- [$loopcount]="$looppath"
            loopcount=$((loopcount + 1))
          fi
        done

        echo "Kill running processes"
        mnt_pid="$(fuser -m "$target")"
        unset systemblocked

        #fuser -km "$mnt" # TODO replace with include list
        for proc in $mnt_pid; do
          unset temp1
          for sysp in $sys_pid; do
            if [ "$proc" == "$sysp" ]; then
              temp1="true"
              systemblocked="true"
              break
            fi
          done
          [[ "$temp1" != "true" ]] && kill -s 9 "$proc"   #TODO less brutal, quit first
        done

        echo "Unmounting ..."
        echo "   unmount Images ..."
        for m in $mounts; do
          # Unmount more and more aggressive
          umount "$m"
          mountpoint -q "$m" && umount -f "$m"
          mountpoint -q "$m" && umount -fl "$m"
        done

        echo "   unmount Loopback Devices ..."
        for l in ${loop[@]}; do
          if [ -e "$l" ]; then
            losetup -d "$l"
            rm "$l"
          fi
        done
      done
    fi
  done
}



##---------------------------Start function_mountram--------------------------##
function function_mountram()
{
  if ! mountpoint -q "$mnt"; then
    echo "$img not mounted"
    exit 5
  elif mountpoint -q "$mnt/$ramdisk"; then
    echo "$mnt/$ramdisk already mounted"
    exit 8
  fi

  mount -t ramfs ramfs "$mnt/$ramdisk"
}



##---------------------------Start function_umountram-------------------------##
function function_umountram()
{
#  echo "Kill running processes"
#  fuser -km "$mnt/$ramdisk"
  echo "Unmounting ..."
  mountpoint -q "$mnt/$ramdisk" && umount -fl "$mnt/$ramdisk"
}

